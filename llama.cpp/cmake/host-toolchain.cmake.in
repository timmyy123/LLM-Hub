# host-toolchain.cmake.in
#
# This is a template for a toolchain file to build host-native tools
# during a cross-compilation build. It is configured by the parent project.

# This is the most critical part. It tells CMake that this sub-project is for native Windows,
# which makes it select the correct linkers (link.exe) and resource compilers (rc.exe)
# instead of the NDK's ld.lld and windres.
set(CMAKE_SYSTEM_NAME Windows)

# We can build host tools in Release mode for better performance.
set(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)

# Set compilers from parent.
set(CMAKE_C_COMPILER "@HOST_C_COMPILER@" CACHE FILEPATH "Host C compiler" FORCE)
set(CMAKE_CXX_COMPILER "@HOST_CXX_COMPILER@" CACHE FILEPATH "Host CXX compiler" FORCE)

# When using MSVC, we must explicitly set all the tools to avoid ambiguity with NDK tools.
if("@MSVC_TOOL_DIR@")
    set(MSVC_TOOL_DIR "@MSVC_TOOL_DIR@")
    set(CMAKE_LINKER      "${MSVC_TOOL_DIR}/link.exe" CACHE FILEPATH "Linker" FORCE)
    set(CMAKE_RC_COMPILER "${MSVC_TOOL_DIR}/rc.exe"   CACHE FILEPATH "Resource Compiler" FORCE)
    set(CMAKE_MT          "${MSVC_TOOL_DIR}/mt.exe"   CACHE FILEPATH "Manifest Tool" FORCE)
endif()

# Prevent CMake from looking for programs or libraries in the Android NDK sysroot.
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)

# Propagate these variables into CMake's test compilations (try_compile).
# This is important to ensure the test compilations also use the correct tools.
set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
    CMAKE_C_COMPILER
    CMAKE_CXX_COMPILER
    CMAKE_LINKER
    CMAKE_RC_COMPILER
    CMAKE_MT
    CACHE STRING "" FORCE
) 